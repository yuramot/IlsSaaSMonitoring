unit AStar64.FileStructs;
//------------------------------------------------------------------------------
// все файловые структуры собраны тут
//
// !!! ВАЖНО !!!
//  размер абсолютно всех файловых структур должен быть кратен 8 байт
//  добавляйте пустое поле в конце при необходимости
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
interface

uses
  AStar64.Typ, Geo.Pos, Generics.Collections, Geo.Hash.Search, System.DateUtils;

const
  CAstarFileStructsVersionMajor     = 1;
  CAstarFileStructsVersionMinor     = 1;
  CAstarFileStructsVersionRevision  = 0;

  CFeature1Bit = 1;
  CFeature1Mask = 1 shl (CFeature1Bit - 1);

//------------------------------------------------------------------------------
type

//------------------------------------------------------------------------------
//! структура гео-хэш вектор
//!   по сути - вектор из From в To, только выраженный через гео-хэши
//------------------------------------------------------------------------------
  PHashVector = ^THashVector;

  THashVector = packed record
    //! откуда
    PointFrom: Int64; // 8
    //! куда
    PointTo: Int64;   // 16
    function Reverse: THashVector;

    class operator Equal(a, b: THashVector): Boolean;
  end;

  THashVectorArray = TArray<THashVector>;

//  ThashVectorDictionary = class(TDictionary<Int64, THashVectorArray>)
//    procedure Add(AValue: THashVector); overload;
//    destructor Destroy; override;
//  end;

//------------------------------------------------------------------------------
//! запись в файле графов "дороги"
//------------------------------------------------------------------------------
  PEdge = ^TEdge;

  TEdge = packed record
    //! гео-хэш вектора начало/конец
    HashVector: THashVector;  // 16
    //! гео-координаты начала
    CoordsFrom: TGeoPos;      // 32
    //! гео-координаты конца
    CoordsTo: TGeoPos;        // 48
    //! длина дороги, км
    Distance: Double;         // 56
    //! максимальная скорость на дороге, км/ч
    MaxSpeed: Integer;        // 60
    //! тип дороги
    RoadType: Integer;        // 64
    //! индекс в файле списка дорог ".list_*"
    LinkIndex: Integer;       // 68
    //! количество дорог в файле списка дорог ".list_*"
    LinkCount: Integer;       // 72
    //! индекс в файле промежуточных точек ".way" (-1 если их нет)
    WayIndex: Integer;        // 76
    //! количество промежуточных точек ".way" (может быть 0)
    WayCount: Integer;        // 80
    //! ID
{$ifndef ASTAR64_VER10}
    ID: Int64;                // 88
{$endif}
    function EqualRouteID(ARouteID: TIDLines): Boolean;
  end;

  TEdgeArray = TArray<TEdge>;

  TCapacityDictionary<TKey,TValue> = class(TDictionary<TKey, TValue>)
  private
    procedure SetCapacity2(const Value: Integer);
  public
    property Capacity2: Integer write SetCapacity2;
  end;

  TEdgeDictionary = TCapacityDictionary<THashVector, Integer>;

  TEdgeDictionaryArray = class(TCapacityDictionary<Int64, TArray<Integer>>)
    procedure Add(const AFrom: Int64; const AIdx: Integer); overload;
  end;

//  private
//    procedure SetCapacity2(const Value: Integer);
//  public
//    property Capacity2: Integer write SetCapacity2;
//  end;

//------------------------------------------------------------------------------
//! TBD
//------------------------------------------------------------------------------
  PZoneControl = ^TZoneControl;

  TZoneControl =  UInt64;

  TZoneControlArray = TArray<TZoneControl>;

//------------------------------------------------------------------------------
//! TBD
//------------------------------------------------------------------------------
  PSignControl = ^TSignControl;

  TSignControl =  UInt64;

  TSignControlArray = TArray<TSignControl>;

//------------------------------------------------------------------------------
//! TBD
//------------------------------------------------------------------------------
  PWayPoint = ^TWayPoint;

  TWayPoint = TGeoPos;

  TWayPointArray = TArray<TWayPoint>;

//------------------------------------------------------------------------------
//! TBD
//------------------------------------------------------------------------------
  PSpeedControl = ^TSpeedControl;

  TTimePeriods = (tpNight, tpMorning, tpDay, tpEvening);
  //7 дней недели, 4 части суток.
  //Пишем округленную скорость если есть, если нет, то из edge

  TSpeedTimePeriod = array [TTimePeriods] of Byte;

  TSpeedControl = packed record
//    SpeedTimePeriod: TSpeedTimePeriod;
    SpeedWeekDays: array [DayMonday..DaySunday] of TSpeedTimePeriod;
  end;

  TSpeedControlArray = TArray<TSpeedControl>;

//------------------------------------------------------------------------------
//! TBD
//------------------------------------------------------------------------------
  PThinEdge = ^TThinEdge;

  TThinEdge = packed record
    //! гео-хэш вектора начало/конец
    HashVector: THashVector;  // 16
    //! гео-координаты начала
    CoordsFrom: TGeoPos;      // 32
    //! гео-координаты конца
    CoordsTo: TGeoPos;        // 48
    //! длина дороги, км
    Distance: Double;         // 56
    //! индекс в файле промежуточных точек ".tway" (-1 если их нет)
    ThinWayIndex: Integer;    // 60
    //! количество промежуточных точек ".tway" (может быть 0)
    ThinWayCount: Integer;    // 64
//    //! длина по зонам, км
//    RoadLengthByZone: TRoadLengthByZoneArray;   // 576
    //! длина по типам дороги, км
    RoadLengthByType: TRoadLengthByTypeRecord;  // 200
  end;

  TThinEdgeArray = TArray<TThinEdge>;

//------------------------------------------------------------------------------
//! TBD
//------------------------------------------------------------------------------
  PThinLink = ^TThinLink;

  TThinLink = packed record
    Index: Integer; // 4
    Count: Integer; // 8
  end;

  TThinLinkArray = TArray<TThinLink>;

//------------------------------------------------------------------------------
//! TBD
//------------------------------------------------------------------------------
  PThinWayPoint = ^TThinWayPoint;

  TThinWayPoint = packed record
    WayPoint: TWayPoint;  // 16
    Zone    : UInt64;     // 24
    RoadType: Integer;    // 28
    Reserved: Integer;    // 32
  end;

  TThinWayPointArray = TArray<TThinWayPoint>;

//------------------------------------------------------------------------------
//! расширения файлов графов
//------------------------------------------------------------------------------
type
  TFileType = (
    ftEdgeF, ftEdgeB, ftListF, ftListB, ftWay,
    ftZCF, ftZCB, ftSCF, ftSCB,
//    ftFeatureF, ftFeatureB,
    ftThinEdgeF, ftThinEdgeB,
    ftThinListF, ftThinListB, ftThinWayF, ftThinWayB, ftSpeed
  );

  TFileTypeSet = set of TFileType;

const
  CFileType: array[TFileType] of string = (
    '.edge_f',
    '.edge_b',
    '.list_f',
    '.list_b',
    '.way',
    '.zc_f',
    '.zc_b',
    '.signs_f',
    '.signs_b',
//    '.feature_f',
//    '.feature_b',
    '.tedge_f',
    '.tedge_b',
    '.tlist_f',
    '.tlist_b',
    '.tway_f',
    '.tway_b',
    '.speed'
  );

//------------------------------------------------------------------------------
implementation

{ THashVector }

class operator THashVector.Equal(a, b: THashVector): Boolean;
begin
  Result :=
    (a.PointFrom = b.PointFrom) and
    (a.PointTo = b.PointTo);
end;

function THashVector.Reverse: THashVector;
begin
  Result.PointFrom := PointTo;
  Result.PointTo := PointFrom;
end;

{ TCapacityDictionary<TKey, TValue> }

procedure TCapacityDictionary<TKey, TValue>.SetCapacity2(const Value: Integer);
begin
  SetCapacity(Value);
end;

{ TEdgeDictionaryArray }

procedure TEdgeDictionaryArray.Add(const AFrom: Int64; const AIdx: Integer);
var
  a: TArray<Integer>;
  i: Integer;
begin
  a := nil;
  if ContainsKey(AFrom) then
    a := ExtractPair(AFrom).Value;

  i := Length(a);
  SetLength(a, i + 1);
  a[i] := AIdx;

  Add(AFrom, a);
end;

{ TEdge }

function TEdge.EqualRouteID(ARouteID: TIDLines): Boolean;
begin
  Result := (ID = ARouteID.OSM_ID) and
            (HashVector.PointFrom = ARouteID.HashStart) and
            (HashVector.PointTo = ARouteID.HashEnd);
end;

end.

